// Code generated by MockGen. DO NOT EDIT.
// Source: notification.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIMailService is a mock of IMailService interface.
type MockIMailService struct {
	ctrl     *gomock.Controller
	recorder *MockIMailServiceMockRecorder
}

// MockIMailServiceMockRecorder is the mock recorder for MockIMailService.
type MockIMailServiceMockRecorder struct {
	mock *MockIMailService
}

// NewMockIMailService creates a new mock instance.
func NewMockIMailService(ctrl *gomock.Controller) *MockIMailService {
	mock := &MockIMailService{ctrl: ctrl}
	mock.recorder = &MockIMailServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMailService) EXPECT() *MockIMailServiceMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockIMailService) SendEmail(ctx context.Context, data any, receivers ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, data}
	for _, a := range receivers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendEmail", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockIMailServiceMockRecorder) SendEmail(ctx, data interface{}, receivers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, data}, receivers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockIMailService)(nil).SendEmail), varargs...)
}
