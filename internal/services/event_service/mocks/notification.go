// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_event_service is a generated GoMock package.
package mock_event_service

import (
	context "context"
	rate_domain "exchange/internal/domain/rate_domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIMailService is a mock of IMailService interface.
type MockIMailService struct {
	ctrl     *gomock.Controller
	recorder *MockIMailServiceMockRecorder
}

// MockIMailServiceMockRecorder is the mock recorder for MockIMailService.
type MockIMailServiceMockRecorder struct {
	mock *MockIMailService
}

// NewMockIMailService creates a new mock instance.
func NewMockIMailService(ctrl *gomock.Controller) *MockIMailService {
	mock := &MockIMailService{ctrl: ctrl}
	mock.recorder = &MockIMailServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMailService) EXPECT() *MockIMailServiceMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockIMailService) SendEmail(ctx context.Context, data any, receivers ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, data}
	for _, a := range receivers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendEmail", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockIMailServiceMockRecorder) SendEmail(ctx, data interface{}, receivers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, data}, receivers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockIMailService)(nil).SendEmail), varargs...)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// GetAllEmails mocks base method.
func (m *MockUserRepository) GetAllEmails(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEmails", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEmails indicates an expected call of GetAllEmails.
func (mr *MockUserRepositoryMockRecorder) GetAllEmails(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEmails", reflect.TypeOf((*MockUserRepository)(nil).GetAllEmails), ctx)
}

// MockICurrencyService is a mock of ICurrencyService interface.
type MockICurrencyService struct {
	ctrl     *gomock.Controller
	recorder *MockICurrencyServiceMockRecorder
}

// MockICurrencyServiceMockRecorder is the mock recorder for MockICurrencyService.
type MockICurrencyServiceMockRecorder struct {
	mock *MockICurrencyService
}

// NewMockICurrencyService creates a new mock instance.
func NewMockICurrencyService(ctrl *gomock.Controller) *MockICurrencyService {
	mock := &MockICurrencyService{ctrl: ctrl}
	mock.recorder = &MockICurrencyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICurrencyService) EXPECT() *MockICurrencyServiceMockRecorder {
	return m.recorder
}

// GetCurrency mocks base method.
func (m *MockICurrencyService) GetCurrency(ctx context.Context, c *rate_domain.Rate) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrency", ctx, c)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrency indicates an expected call of GetCurrency.
func (mr *MockICurrencyServiceMockRecorder) GetCurrency(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrency", reflect.TypeOf((*MockICurrencyService)(nil).GetCurrency), ctx, c)
}
