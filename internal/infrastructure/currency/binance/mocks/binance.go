// Code generated by MockGen. DO NOT EDIT.
// Source: binance.go

// Package mock_binance is a generated GoMock package.
package mock_binance

import (
	context "context"
	rate "exchange/internal/domain/rate"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockChain is a mock of Chain interface.
type MockChain struct {
	ctrl     *gomock.Controller
	recorder *MockChainMockRecorder
}

// MockChainMockRecorder is the mock recorder for MockChain.
type MockChainMockRecorder struct {
	mock *MockChain
}

// NewMockChain creates a new mock instance.
func NewMockChain(ctrl *gomock.Controller) *MockChain {
	mock := &MockChain{ctrl: ctrl}
	mock.recorder = &MockChainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChain) EXPECT() *MockChainMockRecorder {
	return m.recorder
}

// GetCurrency mocks base method.
func (m *MockChain) GetCurrency(ctx context.Context, cur *rate.Rate) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrency", ctx, cur)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrency indicates an expected call of GetCurrency.
func (mr *MockChainMockRecorder) GetCurrency(ctx, cur interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrency", reflect.TypeOf((*MockChain)(nil).GetCurrency), ctx, cur)
}

// SetNext mocks base method.
func (m *MockChain) SetNext(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNext", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNext indicates an expected call of SetNext.
func (mr *MockChainMockRecorder) SetNext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNext", reflect.TypeOf((*MockChain)(nil).SetNext), arg0)
}
