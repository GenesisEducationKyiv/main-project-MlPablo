// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_currency is a generated GoMock package.
package mock_currency

import (
	context "context"
	rate "currency/internal/domain/rate"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICurrencyAPI is a mock of ICurrencyAPI interface.
type MockICurrencyAPI struct {
	ctrl     *gomock.Controller
	recorder *MockICurrencyAPIMockRecorder
}

// MockICurrencyAPIMockRecorder is the mock recorder for MockICurrencyAPI.
type MockICurrencyAPIMockRecorder struct {
	mock *MockICurrencyAPI
}

// NewMockICurrencyAPI creates a new mock instance.
func NewMockICurrencyAPI(ctrl *gomock.Controller) *MockICurrencyAPI {
	mock := &MockICurrencyAPI{ctrl: ctrl}
	mock.recorder = &MockICurrencyAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICurrencyAPI) EXPECT() *MockICurrencyAPIMockRecorder {
	return m.recorder
}

// GetCurrency mocks base method.
func (m *MockICurrencyAPI) GetCurrency(ctx context.Context, data *rate.Rate) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrency", ctx, data)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrency indicates an expected call of GetCurrency.
func (mr *MockICurrencyAPIMockRecorder) GetCurrency(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrency", reflect.TypeOf((*MockICurrencyAPI)(nil).GetCurrency), ctx, data)
}
