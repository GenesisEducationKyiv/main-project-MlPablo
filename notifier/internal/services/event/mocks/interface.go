// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_event is a generated GoMock package.
package mock_event

import (
	context "context"
	notification "notifier/internal/domain/notification"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockINotificationService is a mock of INotificationService interface.
type MockINotificationService struct {
	ctrl     *gomock.Controller
	recorder *MockINotificationServiceMockRecorder
}

// MockINotificationServiceMockRecorder is the mock recorder for MockINotificationService.
type MockINotificationServiceMockRecorder struct {
	mock *MockINotificationService
}

// NewMockINotificationService creates a new mock instance.
func NewMockINotificationService(ctrl *gomock.Controller) *MockINotificationService {
	mock := &MockINotificationService{ctrl: ctrl}
	mock.recorder = &MockINotificationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockINotificationService) EXPECT() *MockINotificationServiceMockRecorder {
	return m.recorder
}

// Notify mocks base method.
func (m *MockINotificationService) Notify(ctx context.Context, n *notification.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", ctx, n)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockINotificationServiceMockRecorder) Notify(ctx, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockINotificationService)(nil).Notify), ctx, n)
}
